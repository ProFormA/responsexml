<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" targetNamespace="urn:proforma:response:v0.5"
           xmlns:tns="urn:proforma:response:v0.5">
    <xs:element name="submission-response">
        <xs:complexType>
            <xs:sequence>
                <!-- The following choice presents two different structure types
                     for the response format. It is up to the LMS to request the
                     preferred structure type in the submission format.
                -->
                <xs:choice>

                    <xs:element name="merged-test-feedback" type="tns:merged-test-feedback" />
                    <!-- merged-test-feedback:
                         Separate feedback items for both the entire submission and individual tests
                         are merged into a single HTML 'blob'.
                    -->

                    <xs:element name="separate-test-feedback" type="tns:separate-test-feedback" />
                    <!-- separate-test-feedback:
                         Contains the separate feedback items for the submission and individual tests.
                         Feedback items are either represented by plain text or HTML fragments.
                         Evaluating the tests' scores as well as presenting the results to the
                         student/teacher is done by the LMS.
                    -->
                </xs:choice>

                <xs:element name="files" type="tns:files" />

                <xs:element name="external-resources" type="tns:external-resources" minOccurs="0"/>
                <!-- External resources may be used for anything that is not a file
                     (e. g. URLs to a website or a web service).
                -->

                <xs:element name="meta-data" type="tns:meta-data"/>
                <!-- The meta-data element holds a namespace for the meta-data of each system
                     (e. g. information about the grader).
                -->
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="meta-data">
        <xs:sequence>
            <xs:element name="grader-engine" type="tns:grader-engine" />
            <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="grader-engine">
        <xs:attribute name="name" use="required" />
        <xs:attribute name="version" use="required" />
    </xs:complexType>

    <xs:complexType name="result">
        <xs:sequence>
            <xs:element name="score" type="tns:score" />
            <xs:element name="validity" minOccurs="0" type="tns:validity" />
        </xs:sequence>

        <xs:attribute name="is-internal-error" type="xs:boolean" default="false" />
        <!-- 'is-internal-error' indicates a system error that should not be attributed to the
             student's submission (e. g. a fault with the JUnit test). -->
        <!-- Use case example 1: If a test resulted in an internal error, the LMS would
             invalidate the entire submission attempt. Since the fault was not with the student's
             submission but with the grader/middleware itself, the student should not lose their
             submission attempt (if such restrictions are in place). -->
        <!-- Use case example 2: The grader is offline and cannot be reached by the middleware. The
             middleware responds with a response XML file with 'is-internal-error' set to true and
             an error feedback describing the error.   -->
        <!-- Use case example 3: If an internal-error occurs, send an email to the
             person/teacher in charge. -->
    </xs:complexType>

    <xs:simpleType name="score">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
            <xs:maxInclusive value="1.0" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="validity">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
            <xs:maxInclusive value="1.0" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="merged-test-feedback">
        <xs:sequence>
            <xs:element name="overall-result" type="tns:result" />
            <xs:element name="student-feedback" type="tns:feedback" minOccurs="0" />
            <xs:element name="teacher-feedback" type="tns:feedback" minOccurs="0" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="separate-test-feedback">
        <xs:sequence>
            <xs:element name="submission-feedback-list" type="tns:feedback-list" />
            <!-- The 'submission-feedback-list' represents the feedback for the entire submission rather
                 than for individual tests.
                 Use case examples: the incoming submission XML file was invalid and therefore
                 rejected. Or: a file was referenced in the taskxml format, but the file was not present in the
                 ZIP archive.
            -->

            <xs:element name="tests" type="tns:tests">
                <!-- 'tests' contain test-specific test results. -->

                <xs:unique name="testid">
                    <xs:selector xpath=".//tns:test"/>
                    <xs:field xpath="@id"/>
                </xs:unique>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="tests">
        <xs:sequence>
            <xs:element name="test" type="tns:test" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="test-result">
        <xs:sequence>
            <xs:element name="result" type="tns:result" />
            <xs:element name="feedback-list" type="tns:feedback-list" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="test">
        <xs:choice>
            <xs:element name="test-result" type="tns:test-result" />
            <xs:element name="subtests" type="tns:subtests">
                <xs:unique name="subtestid">
                    <xs:selector xpath=".//tns:subtest"/>
                    <xs:field xpath="@id"/>
                </xs:unique>
            </xs:element>
        </xs:choice>
        <xs:attribute name="id" use="required" />
    </xs:complexType>

    <xs:complexType name="subtests">
        <xs:sequence>
            <xs:element name="subtest" maxOccurs="unbounded" type="tns:subtest" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="subtest">
        <xs:sequence>
            <xs:element name="test-result" type="tns:test-result" />
        </xs:sequence>
        <xs:attribute name="id" use="required" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="feedback-list">
        <xs:sequence>
            <xs:element name="student-feedback" minOccurs="0" maxOccurs="unbounded"
                        type="tns:feedback" />
            <xs:element name="teacher-feedback" minOccurs="0" maxOccurs="unbounded"
                        type="tns:feedback" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="feedback">
        <xs:sequence>
            <!-- title is plain text. Multiple consecutive whitespaces might be
                 presented by the LMS as single spaces.
                 This title does not replace the "displaytitle" of the grading-hints, but
                 it can be used e. g. to output different sub-titles for teacher or student feedback,
                 for info or error feedback, etc. -->
            <xs:element name="title" minOccurs="0" type="xs:string" />
            <!-- title and content are meant to be presented to teachers and students by the LMS
                 as immediately readable text. Images may be embedded as data uri into content. -->
            <xs:element name="content" minOccurs="0">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="format" use="required">
                                <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                        <xs:enumeration value="html" />
                                        <xs:enumeration value="plaintext" />
                                        <!-- content includes preformatted whitespace -->
                                    </xs:restriction>
                                </xs:simpleType>
                            </xs:attribute>
                        </xs:extension>
                    </xs:simpleContent>

                </xs:complexType>
            </xs:element>
            <!-- filerefs and externalresourcerefs are meant to be presented to
                 teachers and students by the LMS as clickable hyperlinks.
                 Clicking triggers downloading the respective file or navigation
                 to the respective resource.
                 If the backend includes HTML-content or images as files, the LMS should also
                 present such files as clickable links. -->
            <xs:element name="filerefs" type="tns:filerefs" minOccurs="0" />
            <xs:element name="externalresourcerefs" type="tns:externalresourcerefs" minOccurs="0"/>
        </xs:sequence>

        <xs:attribute name="level" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="debug" />
                    <xs:enumeration value="info" />
                    <xs:enumeration value="warn" />
                    <xs:enumeration value="error" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="files">
        <xs:sequence>
            <xs:element name="file" minOccurs="0" maxOccurs="unbounded"
                        type="tns:file" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="file">
        <xs:choice>
            <xs:element name="embedded-file" type="tns:embedded-file" />
            <!-- For embedding files in the response XML file.
                 The element content is the file's content.
                 The content can be optionally encoded to base64. -->

            <xs:element name="attached-file" type="xs:string" />
            <!-- For attaching files to a ZIP archive (along with the
                 response XML file).
                 The element content is the relative path to the file
                 in the ZIP archive. -->
        </xs:choice>
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="title" type="xs:string" use="required" />
        <xs:attribute name="mimetype" type="xs:string" use="optional" />
    </xs:complexType>

    <xs:complexType name="embedded-file">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="filename" type="xs:string"
                              use="required"/>
                <xs:attribute name="is-base64-encoded" type="xs:boolean"
                              default="false" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="external-resources">
        <!-- TODO: The minOccurs constraint should be set on the element external-resource rather than
             on the sequence, so it is consistent with the 'file' type.
             (This should be changed in the taskxml format as well.) -->
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="external-resource" type="tns:external-resource"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="external-resource">
        <!-- This external-resource is very similar to the external-resource in the taskxml format
             (except for the description attribute, which is a title here ...) -->

        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="title" use="optional" />
        <xs:attribute name="reference" type="xs:string"/>
        <!-- TODO: Do we need external resources to be extensible, like in taskxml?
        <xs:sequence>
            <xs:element name="description" type="tns:description" minOccurs="0"/>
            <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xs:sequence>
        -->
    </xs:complexType>

    <xs:complexType name="filerefs">
        <xs:sequence maxOccurs="unbounded">
            <xs:element name="fileref" type="tns:fileref"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="fileref">
        <xs:attribute name="refid" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="externalresourcerefs">
        <!-- Both filerefs' and externalresourcerefs' type definition have been copied from the taskxml format.
             Why does externalresourcerefs have a minOccurs set to 0, but filrefs does not? -->

        <!-- TODO: The minOccurs=0 constraint should be removed, it serves no purpose
             (externalresourcerefs already has a minOccurs=0 constraint in 'feedback').
             It should be consistent with the 'filerefs' type.
             (This should be changed in the taskxml format as well.) -->
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="externalresourceref" type="tns:externalresourceref"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="externalresourceref">
        <xs:attribute name="refid" type="xs:string" use="required"/>
    </xs:complexType>
</xs:schema>
